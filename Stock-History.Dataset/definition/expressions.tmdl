expression getRollingMonths =
		// considerar meses inteiros... contando a partir do dia 1 do mês - mes atual sempre será 0, mes anterior 1 e mes seguinte -1
		// getRollingMonths :
		(Date as date) as number =>
		// considerar meses inteiros... contando a partir do dia 1 do mês - mes atual sempre será 0, mes anterior 1 e mes seguinte -1
		// [YearDiff]*12+[MonthDiff]
		let
		    CurrentDate = Date.From(DateTime.FixedLocalNow()),
		    CurrentMonth = Date.Month(CurrentDate),
		    CurrentYear = Date.Year(CurrentDate),
		    Year = Date.Year(Date),
		    Month = Date.Month(Date),
		    YearDiff = CurrentYear-Year,
		    MonthDiff = CurrentMonth-Month,
		    Result = YearDiff*12+MonthDiff
		in
		    Result
	lineageTag: fe9d8f3f-bd14-4dd7-8701-86840845a892
	queryGroup: Extract\M

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Function

expression m_measures = ```
		let
		    Source = #table({"hidden"},{})    
		in
		    Source
		```
	lineageTag: 2f6b9aaa-8a04-41d4-bd2e-3b66237d591e
	queryGroup: Extract\M

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression get_time_daily_full =
		(symbol as text) =>
		let
		    // symbol = "IBM",
		    // service = "?function=TIME_SERIES_DAILY&symbol=",
		    service = "?function=TIME_SERIES_DAILY&outputsize=full&symbol=",
		    relPath = Text.Combine({service, symbol, "&apikey=",APIKey}),
		    Source = Json.Document(
		      Web.Contents(
		          ApiUrl,
		          [
		              RelativePath = relPath
		          ]
		        )
		    ),
		    #"Time Series (Daily)" = Source[#"Time Series (Daily)"],
		    #"Converted to Table" = Record.ToTable(#"Time Series (Daily)"),
		    #"Expanded Value" = Table.ExpandRecordColumn(#"Converted to Table", "Value", {"1. open", "2. high", "3. low", "4. close", "5. volume"}, {"1. open", "2. high", "3. low", "4. close", "5. volume"}),
		    #"Replaced Value" = Table.ReplaceValue(#"Expanded Value",".",",",Replacer.ReplaceText,{"1. open", "2. high", "3. low", "4. close", "5. volume"}),
		    #"Renamed Columns" = Table.RenameColumns(#"Replaced Value",{{"Name", "Date"}}),
		    #"Changed Type" = Table.TransformColumnTypes(#"Renamed Columns",{{"1. open", type number}, {"2. high", type number}, {"3. low", type number}, {"4. close", type number}, {"5. volume", type number}, {"Date", type date}})
		in
		    #"Changed Type"
	lineageTag: 5e155f72-c347-40a8-bbce-14a86b31630b
	queryGroup: Extract

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Function

expression time_daily_full_sample_IBM =
		let
		    symbol = "IBM",
		    ApiUrl = "https://www.alphavantage.co/query?",
		    APIKey = "EQ3MYXU9LJOJOV4Y",
		    service = "?function=TIME_SERIES_DAILY&outputsize=full&symbol=",
		    relPath = Text.Combine({service, symbol, "&apikey=",APIKey}),
		    Source = Json.Document(
		      Web.Contents(
		          ApiUrl,
		          [
		              RelativePath = relPath
		          ]
		        )
		    ),
		    #"Time Series (Daily)" = Source[#"Time Series (Daily)"],
		    #"Converted to Table" = Record.ToTable(#"Time Series (Daily)"),
		    #"Expanded Value" = Table.ExpandRecordColumn(#"Converted to Table", "Value", {"1. open", "2. high", "3. low", "4. close", "5. volume"}, {"1. open", "2. high", "3. low", "4. close", "5. volume"}),
		    #"Replaced Value" = Table.ReplaceValue(#"Expanded Value",".",",",Replacer.ReplaceText,{"1. open", "2. high", "3. low", "4. close", "5. volume"}),
		    #"Renamed Columns" = Table.RenameColumns(#"Replaced Value",{{"Name", "Date"}}),
		    #"Changed Type" = Table.TransformColumnTypes(#"Renamed Columns",{{"1. open", type number}, {"2. high", type number}, {"3. low", type number}, {"4. close", type number}, {"5. volume", type number}, {"Date", type date}})
		in
		    #"Changed Type"
	lineageTag: 38aa14c4-a3e2-455a-a6d8-c259766b2f80
	queryGroup: Dev

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression m_symbols =
		let
		    //Source = #table({"Hidden"},{})
		    Source = #table(type table [symbol=text],
		        {
		            {"IBM"},
		    	//    {"PETR3.SAO"},
		            {"PETR4.SAO"},
		            {"AZUL"},
		        //    {"AZUL4.SAO"},
		        //    {"KLBN3.SAO"},
		        //    {"KLBN4.SAO"},
		            {"KLBN11.SAO"}
		        }
		
		    )
		in
		    Source
	lineageTag: b7243d98-d987-44af-9cb7-2a4c4a327c3a
	queryGroup: Extract

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression get_symbol =
		// (keywords as text) =>
		let
		    keywords = "KLBN",
		    service = "?function=SYMBOL_SEARCH&keywords=",
		    relPath = Text.Combine({service, keywords, "&apikey=",APIKey}),
		    Source = Json.Document(
		      Web.Contents(
		          ApiUrl,
		          [
		              RelativePath = relPath
		          ]
		        )
		    ),
		    bestMatches = Source[bestMatches],
		    #"Converted to Table" = Table.FromList(bestMatches, Splitter.SplitByNothing(), null, null, ExtraValues.Error),
		    #"Expanded Column1" = Table.ExpandRecordColumn(#"Converted to Table", "Column1", {"1. symbol", "2. name", "3. type", "4. region", "5. marketOpen", "6. marketClose", "7. timezone", "8. currency", "9. matchScore"}, {"1. symbol", "2. name", "3. type", "4. region", "5. marketOpen", "6. marketClose", "7. timezone", "8. currency", "9. matchScore"})
		in
		    #"Expanded Column1"
	lineageTag: aac50979-d714-4a89-a58a-f454490d8481
	queryGroup: Extract

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression t_symbols_daily =
		let
		    Source = m_symbols,
		    #"Invoked Custom Function" = Table.AddColumn(Source, "get_time_daily_full", each get_time_daily_full([symbol])),
		    #"Expanded get_time_daily_full" = Table.ExpandTableColumn(#"Invoked Custom Function", "get_time_daily_full", {"Date", "1. open", "2. high", "3. low", "4. close", "5. volume"}, {"Date", "1. open", "2. high", "3. low", "4. close", "5. volume"}),
		    #"Changed Type" = Table.TransformColumnTypes(#"Expanded get_time_daily_full",{{"Date", type date}, {"1. open", type number}, {"2. high", type number}, {"3. low", type number}, {"4. close", type number}, {"5. volume", type number}}),
		    #"Added Custom" = Table.AddColumn(#"Changed Type", "diff", each [4. close]-[1. open], type number),
		    #"Added Conditional Column" = Table.AddColumn(#"Added Custom", "direction", each if [1. open] <= [4. close] then "Up" else "Down", type text)
		in
		    #"Added Conditional Column"
	lineageTag: 1a05e779-73b3-4418-b01c-69270fb37161
	queryGroup: Transform

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression ApiUrl = "https://www.alphavantage.co/query?" meta [IsParameterQuery=true, Type="Any", IsParameterQueryRequired=true]
	lineageTag: bee8640d-d9f9-4cc2-b8d3-5df2c3a043ca
	queryGroup: 'Extract\API Parm'

	annotation PBI_ResultType = Text

expression APIKey = "EQ3MYXU9LJOJOV4Y" meta [IsParameterQuery=true, Type="Any", IsParameterQueryRequired=true]
	lineageTag: 5f35d750-cb66-4f62-a920-7a5b8a521a03
	queryGroup: 'Extract\API Parm'

	annotation PBI_ResultType = Text

expression m_calendar =
		let
		    MinYear = 1999,
		    MaxYear = 2024,
		    // MinYear = Date.Year(List.Min(financials[Date])),
		    // MaxYear = Date.Year(List.Max(financials[Date])),
		    BeginDate = #date(MinYear, 1, 1),
		    EndDate = #date(MaxYear, 12, 31),
		    DaysBetween = Duration.Days(EndDate - BeginDate) + 1,
		    DatesList = List.Dates(BeginDate, DaysBetween, #duration(1,0,0,0)),
		    ConvertedToTable = Table.FromList(DatesList, Splitter.SplitByNothing(), null, null, ExtraValues.Error),
		    RenamedColumns = Table.RenameColumns(ConvertedToTable,{{"Column1", "Date"}}),
		    ChangedType = Table.TransformColumnTypes(RenamedColumns,{{"Date", type date}}),
		
		    Add_Year = Table.AddColumn(ChangedType, "Year", each Date.Year([Date]), Int64.Type),
		    Add_Month = Table.AddColumn(Add_Year, "Month", each Date.Month([Date]), Int64.Type),
		    Add_MonthName = Table.AddColumn(Add_Month, "Month Name", each Date.MonthName([Date], "en-GB"), type text),
		    Add_YearMonthSort = Table.AddColumn(Add_MonthName, "YearMonthSort", each [Year]*100 + [Month], Int64.Type),
		    Add_Day = Table.AddColumn(Add_YearMonthSort, "Day", each Date.Day([Date]), Int64.Type),
		    Add_DayOfWeek = Table.AddColumn(Add_Day, "Day of Week", each Date.DayOfWeek([Date]), Int64.Type),
		    Add_WeekOfYear = Table.AddColumn(Add_DayOfWeek, "Week of Year", each Date.WeekOfYear([Date]), Int64.Type),
		    Add_DayOfWeekName = Table.AddColumn(Add_WeekOfYear, "Day of Week Name", each Date.DayOfWeekName([Date], "en-GB"), type text),
		    Add_Semester = Table.AddColumn(Add_DayOfWeekName, "Semester", each if [Month] <= 6 then "S1" else "S2", type text),
		    Add_Quarter = Table.AddColumn(Add_Semester, "Quarter", each Date.QuarterOfYear([Date]), Int64.Type),
		    Add_ShortMonth = Table.AddColumn(Add_Quarter, "Short Month", each Text.Start([Month Name], 3), type text),
		    Add_YearMonth = Table.AddColumn(Add_ShortMonth, "Year-Month", each Text.Combine({Text.From([Year], "en-GB"), "-", Text.Start([Month Name], 3)}))
		in
		    Add_YearMonth
	lineageTag: 75b4a354-82e1-42e8-b7a3-410d33c4330f
	queryGroup: Extract\M

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

